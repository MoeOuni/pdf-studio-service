// Prisma schema for PostgreSQL on AWS RDS
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table (migrated from MongoDB User model)
model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  passwordHash  String   @map("password_hash")
  name          String?
  emailVerified Boolean  @default(false) @map("email_verified")
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  profile       UserProfile?
  uploadedFiles UploadedFile[]
  generatedPdfs GeneratedPdf[]

  @@map("users")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED

  @@map("user_status")
}

// User profiles table (extended user information)
model UserProfile {
  userId      String   @id @map("user_id") @db.Uuid
  avatarUrl   String?  @map("avatar_url")
  company     String?
  timezone    String   @default("UTC")
  language    String   @default("en")
  preferences Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Uploaded files table (tracks all PDF files uploaded by users)
model UploadedFile {
  id               String       @id @default(uuid()) @db.Uuid
  userId           String       @map("user_id") @db.Uuid
  originalFilename String       @map("original_filename")
  storedFilename   String       @map("stored_filename")
  filePath         String       @map("file_path")
  s3Bucket         String       @map("s3_bucket")
  s3Key            String       @map("s3_key")
  fileSize         BigInt       @map("file_size")
  mimeType         String?      @map("mime_type")
  fileHash         String?      @map("file_hash") // SHA-256 hash for deduplication
  uploadStatus     UploadStatus @default(COMPLETED) @map("upload_status")
  metadata         Json         @default("{}") // PDF metadata (dimensions, page count, etc.)
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime     @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedPdfs GeneratedPdf[]

  @@index([userId])
  @@index([uploadStatus])
  @@index([fileHash])
  @@index([createdAt])
  @@map("uploaded_files")
}

enum UploadStatus {
  UPLOADING
  COMPLETED
  FAILED
  DELETED

  @@map("upload_status")
}

// Generated PDFs table (tracks all generated PDFs)
model GeneratedPdf {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  templateId        String    @map("template_id") // References DynamoDB template
  originalFileId    String?   @map("original_file_id") @db.Uuid
  generatedFilename String    @map("generated_filename")
  filePath          String    @map("file_path")
  s3Bucket          String    @map("s3_bucket")
  s3Key             String    @map("s3_key")
  fileSize          BigInt    @map("file_size")
  generationData    Json      @map("generation_data") // The payload used for generation
  downloadCount     Int       @default(0) @map("download_count")
  expiresAt         DateTime? @map("expires_at") @db.Timestamptz // For cleanup (30 days default)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalFile UploadedFile? @relation(fields: [originalFileId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([templateId])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("generated_pdfs")
}